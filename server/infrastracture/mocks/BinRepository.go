// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domain "github.com/KageShiron/reqhack/server/domain"

import mock "github.com/stretchr/testify/mock"

// BinRepository is an autogenerated mock type for the BinRepository type
type BinRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: name
func (_m *BinRepository) Add(name string) (*domain.Bin, error) {
	ret := _m.Called(name)

	var r0 *domain.Bin
	if rf, ok := ret.Get(0).(func(string) *domain.Bin); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: name
func (_m *BinRepository) Get(name string) (*domain.Bin, error) {
	ret := _m.Called(name)

	var r0 *domain.Bin
	if rf, ok := ret.Get(0).(func(string) *domain.Bin); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *BinRepository) GetByID(id int64) (*domain.Bin, error) {
	ret := _m.Called(id)

	var r0 *domain.Bin
	if rf, ok := ret.Get(0).(func(int64) *domain.Bin); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
